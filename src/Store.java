import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.net.Socket;import java.util.ArrayList;import java.util.Date;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.EmptyBorder;class storeGUI extends JFrame implements Runnable { private JPanel contentPane; private JTable stockTable, transTable; private JScrollPane stockScroll, transScroll; private JPanel stockPanel, transPanel; private JLabel timeLabel; /**  * Create the frame.  */ public storeGUI() {  setTitle("Store Management");  setResizable(false);  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100, 100, 655, 408);  contentPane = new JPanel();  contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));  setContentPane(contentPane);  contentPane.setLayout(null);  timeLabel = new JLabel("Access time : " + new Date().toString());  timeLabel.setBounds(386, 10, 251, 15);  contentPane.add(timeLabel);  JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);  tabbedPane.setBounds(12, 10, 625, 359);  contentPane.add(tabbedPane);  // �옱怨좉�由� �꺆 �뙣�꼸  stockPanel = new JPanel();  tabbedPane.addTab("Manage inventory", null, stockPanel, null);  stockPanel.setLayout(null);  String[] stockColumnNames = { "name", "amount", "Maximum capacity", "Maintaining minimum quantity" };  Object[][] stockData = { { "A", new Integer(50), new Integer(100), new Integer(20) },    { "B", new Integer(70), new Integer(150), new Integer(50) } };  stockTable = new JTable(stockData, stockColumnNames) {   @Override   public boolean isCellEditable(int row, int column) {    return false;   }  };  stockTable.setFocusable(false);  stockTable.setRowSelectionAllowed(true);  stockScroll = new JScrollPane(stockTable);  stockScroll.setBounds(0, 0, 620, 265);  stockPanel.add(stockScroll);  JButton btnModifyStock = new JButton("edit inventory");  btnModifyStock.setBounds(170, 275, 116, 23);  stockPanel.add(btnModifyStock);  JButton btnModifyMaxMin = new JButton("capacity edit");  btnModifyMaxMin.setBounds(333, 275, 173, 23);  stockPanel.add(btnModifyMaxMin);  // 二쇰Ц愿�由� �꺆 �뙣�꼸  transPanel = new JPanel();  tabbedPane.addTab("order managing", null, transPanel, null);  transPanel.setLayout(null);  String[] transColumnNames = { "Warehouse name", "goods name", "amount of trasportation", "cost of trasportation", "shipping(Y/N)" };  Object[][] transData = { { "A Warehouse", "A", new Integer(50), new Integer(30000), new Boolean(false) } };  transTable = new JTable(transData, transColumnNames) {   @Override   public boolean isCellEditable(int row, int column) {    return false;   }  };  transScroll = new JScrollPane(transTable);  transScroll.setBounds(12, 46, 596, 238);  transPanel.add(transScroll);  JButton btnReceived = new JButton("Receipt of completed");  btnReceived.setBounds(486, 294, 122, 23);  transPanel.add(btnReceived);  JButton btnNew = new JButton("A new order");  btnNew.setBounds(12, 10, 140, 23);  transPanel.add(btnNew);  JButton btnCancle = new JButton("cancel order");  btnCancle.setBounds(164, 10, 114, 23);  transPanel.add(btnCancle); } @Override public void run() {  setVisible(true);  while (true) {   timeLabel.setText("current time : " + new Date().toString());  } }}public class Store extends Thread { // 李쎄퀬, 媛�寃뚯쓽 怨듯넻 �긽�쐞�겢�옒�뒪 // �궡遺� �옱怨� �겢�옒�뒪 private class Stock {  private String name;  private int remain; // �옱怨좊웾  private int max; // 理쒕� �닔�슜媛��뒫�웾  private int min; // 理쒖냼 �쑀吏��옱怨좊웾  private String Address;  private double cash;  /* �븘�뱶 醫낅즺 */  public Stock(String name, int remain, int max, int min) { // Stock �깮�꽦�옄   this.name = name;   this.remain = remain;   this.max = max;   this.min = min;  }  public void setRemain(int remain) { // �옱怨좊웾 �닔�젙   this.remain = remain;  }  public void setMax(int max) { // 理쒕� �닔�웾 �닔�젙   this.max = max;  }  public void setMin(int min) { // 理쒖냼 �닔�웾 �닔�젙   this.min = min;  } } // �궡遺� 二쇰Ц �겢�옒�뒪 private class Order {  private String warehouseName; // 李쎄퀬 �씠由�  private String name; // 臾쇳뭹 �씠由�  private int quantity; // �슫�넚�웾  private int cost; // �슫�넚鍮�  private boolean isSent; // 諛쒖넚�뿬遺�  private int Order_NO;  private date Order_date;  private double Total_cost;  private String storeName;   // private boolean isReceived; //�닔�졊�뿬遺�  public void setSent(boolean isSent) { // 諛쒖넚�뿬遺� �닔�젙   this.isSent = isSent;  }  public Order(String warename, String name, int quantity, int cost, boolean issent) { // Order                        // �깮�꽦�옄   this.warehouseName = warename;   this.name = name;   this.quantity = quantity;   this.cost = cost;   this.isSent = false;   // this.isReceived = false;  } } /* �븘�뱶 �떆�옉 */ private double x, y; // 醫뚰몴 private String id; // 怨좎쑀 �꽆踰� private String password; private String name; private storeGUI frame; private ArrayList<Stock> stocks = new ArrayList<Stock>(); // �옱怨� �뼱�젅�씠由ъ뒪�듃 private ArrayList<Order> orders = new ArrayList<Order>(); // 二쇰Ц �뼱�젅�씠由ъ뒪�듃 private Socket socket; // �꽌踰꾩뿉 �뿰寃고븯湲� �쐞�븳 �냼耳� private BufferedReader in; // �꽌踰꾩� �넻�떊�븯湲곗쐞�븳 in �뒪�듃由� private PrintWriter out; // out �뒪�듃由� /* �븘�뱶 醫낅즺 */ /* Store �깮�꽦�옄 */ public Store(String id, String password, int kind) throws Exception { // Store                   // �깮�꽦�옄  this.id = id;  this.password = password;  socket = new Socket("localhost", 9001); // �냼耳� �꽕�젙(濡쒖뺄�샇�뒪�듃, �룷�듃 9001)  // �꽕�젙�븳 �냼耳볦뿉�꽌 �뒪�듃由� �깮�꽦  in = new BufferedReader(new InputStreamReader(socket.getInputStream()));  out = new PrintWriter(socket.getOutputStream(), true);  if (kind == 2) {   Thread gui = new Thread(new storeGUI());   this.start();   gui.start();  }  else {   Thread gui = new Thread(new warehouseGUI());   this.start();   gui.start();  } } @Override public void run() {  String command;  while (true) {   try {    command = in.readLine(); // �꽌踰꾩뿉�꽌 而ㅻ㎤�뱶 �씫�뼱�샂    System.out.println(command);    if (command.startsWith("Verifying"))     out.println(this.id);    if (command.startsWith("Accepted")) {     // 濡쒓렇�씤 �꽦怨� 硫붿떆吏� �뙘�뾽     JOptionPane.showMessageDialog(frame, "You are connected to server.");    }   } catch (IOException e) {    e.printStackTrace();   }  } }}
